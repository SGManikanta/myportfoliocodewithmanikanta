{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyORqRae0iYqQXfZsJrXQ36N",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SGManikanta/myportfoliocodewithmanikanta/blob/main/AI%20smart%20agriculture\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "class PipelineInspector:\n",
        "    def __init__(self, pipeline, depth_limit, battery_life):\n",
        "        self.pipeline = pipeline\n",
        "        self.depth_limit = depth_limit\n",
        "        self.battery_life = battery_life\n",
        "        self.visited = set()\n",
        "\n",
        "    def depth_limited_search(self, current_section, clog_section, depth):\n",
        "        \"\"\"Performs Depth-Limited Search (DLS) with battery life and obstacle handling.\"\"\"\n",
        "        print(f\" Inspecting section {current_section} | Depth: {depth} | Battery: {self.battery_life}\")\n",
        "\n",
        "        # Check if battery is completed\n",
        "        if self.battery_life <= 0:\n",
        "            print(f\" Battery completed at {current_section}. Returning.\")\n",
        "            return None\n",
        "\n",
        "        # Check if depth exceeds limit\n",
        "        if depth > self.depth_limit:\n",
        "            print(f\" Depth limit reached at {current_section}. Returning.\")\n",
        "            return None\n",
        "\n",
        "        # random obstruction is kept\n",
        "        if random.random() < 0.3:\n",
        "            print(f\" Obstruction detected at {current_section}. Trying an alternate route...\")\n",
        "            return self.find_alternate_route(current_section, clog_section, depth)\n",
        "\n",
        "        # check clog\n",
        "        if current_section == clog_section:\n",
        "            print(f\" Clog found at section {current_section}!\")\n",
        "            return current_section\n",
        "\n",
        "        self.visited.add(current_section)\n",
        "        self.battery_life -= 1\n",
        "\n",
        "        # Explore neighbors\n",
        "        for neighbor in self.pipeline.get(current_section, []):\n",
        "            if neighbor not in self.visited:\n",
        "                result = self.depth_limited_search(neighbor, clog_section, depth + 1)\n",
        "                if result:\n",
        "                    return result\n",
        "\n",
        "        print(f\" No clog found in {current_section}. Backtracking...\")\n",
        "        return None\n",
        "\n",
        "    def find_alternate_route(self, current_section, clog_section, depth):\n",
        "        \"\"\"Attempts to find an alternate route when an obstruction is encountered.\"\"\"\n",
        "        alternate_paths = self.pipeline.get(current_section, [])\n",
        "        random.shuffle(alternate_paths)\n",
        "\n",
        "        for alt in alternate_paths:\n",
        "            if alt not in self.visited:\n",
        "                print(f\" Trying alternate route through {alt}...\")\n",
        "                result = self.depth_limited_search(alt, clog_section, depth + 1)\n",
        "                if result:\n",
        "                    return result\n",
        "\n",
        "        print(f\" No alternate routes available from {current_section}.\")\n",
        "        return None\n",
        "\n",
        "    def upgrade_battery(self):\n",
        "        \"\"\"Increases battery life.\"\"\"\n",
        "        self.battery_life += 3\n",
        "        print(\" Battery upgraded! Additional power added.\")\n",
        "\n",
        "    def upgrade_depth_limit(self):\n",
        "        \"\"\"Temporarily increases the depth limit.\"\"\"\n",
        "        self.depth_limit += 2\n",
        "        print(\" Depth limit upgraded! The robot can inspect deeper.\")\n",
        "\n",
        "# Pipeline\n",
        "pipeline_map = {\n",
        "    'A': ['B', 'C'],\n",
        "    'B': ['D', 'E'],\n",
        "    'C': ['F'],\n",
        "    'D': [],\n",
        "    'E': ['G'],\n",
        "    'F': [],\n",
        "    'G': []\n",
        "}\n",
        "\n",
        "print(\"\\n Pipeline Inspection System\\n\")\n",
        "start_section = input(\"Enter the starting section: \")\n",
        "clog_location = input(\"Enter the section where the clog is located: \")\n",
        "depth_limit = int(input(\"Enter the depth limit: \"))\n",
        "battery_life = int(input(\"Enter initial battery life (steps): \"))\n",
        "\n",
        "# Create the inspector\n",
        "robot = PipelineInspector(pipeline_map, depth_limit, battery_life)\n",
        "\n",
        "# Start search\n",
        "print(\"\\n Starting depth-limited search...\\n\")\n",
        "result = robot.depth_limited_search(start_section, clog_location, 0)\n",
        "\n",
        "if result:\n",
        "    print(f\"\\n SUCCESS: Clog found at section {result}!\")\n",
        "else:\n",
        "    print(\"\\n No clog found within the depth or battery limit. Consider upgrading the system.\")\n",
        "\n",
        "# Upgrade options\n",
        "while True:\n",
        "    upgrade_choice = input(\"\\nDo you want to upgrade the system? (battery/depth/no): \").strip().lower()\n",
        "\n",
        "    if upgrade_choice == \"battery\":\n",
        "        robot.upgrade_battery()\n",
        "    elif upgrade_choice == \"depth\":\n",
        "        robot.upgrade_depth_limit()\n",
        "    elif upgrade_choice == \"no\":\n",
        "        break\n",
        "    else:\n",
        "        print(\"Invalid choice. Please type 'battery', 'depth', or 'no'.\")\n",
        "        continue\n",
        "\n",
        "    print(\"\\n Restarting search with upgraded capabilities...\\n\")\n",
        "    result = robot.depth_limited_search(start_section, clog_location, 0)\n",
        "    if result:\n",
        "        print(f\"\\n SUCCESS: Clog found at section {result} after upgrade!\")\n",
        "        break\n",
        "    else:\n",
        "        print(\"\\n Still no clog found. Try another upgrade or stop.\")"
      ],
      "metadata": {
        "id": "ULFzfKMosoPm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class PipelineInspector:\n",
        "    def __init__(self, pipeline, depth_limit, battery_life, obstructions):\n",
        "        self.pipeline = pipeline  # Graph representation of the pipeline\n",
        "        self.depth_limit = depth_limit  # Maximum depth limit\n",
        "        self.initial_battery = battery_life  # Store initial battery value for resets\n",
        "        self.battery_life = battery_life  # Current battery life\n",
        "        self.visited = set()  # Track visited sections\n",
        "        self.obstructions = obstructions  # User-defined obstructions\n",
        "\n",
        "    def depth_limited_search(self, current_section, clog_section, depth):\n",
        "        \"\"\"Performs Depth-Limited Search (DLS) with battery life and automatic obstruction handling.\"\"\"\n",
        "        print(f\"  Inspecting section {current_section} | Depth: {depth} | Battery: {self.battery_life}\")\n",
        "\n",
        "        # Check if battery is exhausted\n",
        "        if self.battery_life <= 0:\n",
        "            print(f\"  Battery exhausted at {current_section}. Returning.\")\n",
        "            return None\n",
        "\n",
        "        # Check if depth exceeds limit\n",
        "        if depth > self.depth_limit:\n",
        "            print(f\"   Depth limit reached at {current_section}. Returning.\")\n",
        "            return None\n",
        "\n",
        "        # Check if there's an obstruction\n",
        "        if current_section in self.obstructions:\n",
        "            print(f\"  Obstruction detected at {current_section}. Searching for an alternate route...\")\n",
        "            return self.find_alternate_route(current_section, clog_section, depth)\n",
        "\n",
        "        # Check if this section has the clog\n",
        "        if current_section == clog_section:\n",
        "            print(f\"  Clog found at section {current_section}!\")\n",
        "            return current_section\n",
        "\n",
        "        self.visited.add(current_section)  # Mark section as visited\n",
        "        self.battery_life -= 1  # Reduce battery per move\n",
        "\n",
        "        # Explore neighbors\n",
        "        for neighbor in self.pipeline.get(current_section, []):\n",
        "            if neighbor not in self.visited:\n",
        "                result = self.depth_limited_search(neighbor, clog_section, depth + 1)\n",
        "                if result:\n",
        "                    return result\n",
        "\n",
        "        print(f\"  No clog found in {current_section}. Backtracking...\")\n",
        "        return None  # No clog found\n",
        "\n",
        "    def find_alternate_route(self, current_section, clog_section, depth):\n",
        "        \"\"\"Finds an alternate route automatically when an obstruction is encountered.\"\"\"\n",
        "        alternate_paths = [\n",
        "            node for node in self.pipeline.get(current_section, [])\n",
        "            if node not in self.visited and node not in self.obstructions\n",
        "        ]\n",
        "\n",
        "        if alternate_paths:\n",
        "            print(f\"  Found alternate routes: {', '.join(alternate_paths)}. Choosing one...\")\n",
        "            for alt in alternate_paths:\n",
        "                result = self.depth_limited_search(alt, clog_section, depth + 1)\n",
        "                if result:\n",
        "                    return result\n",
        "\n",
        "        print(f\"️  No alternate routes available from {current_section}. Backtracking...\")\n",
        "        return None  # No valid alternate route found\n",
        "\n",
        "    def upgrade_battery(self):\n",
        "        \"\"\"Allows user to choose battery increase and applies it.\"\"\"\n",
        "        try:\n",
        "            increase = int(input(\"  Enter the amount to increase battery by: \"))\n",
        "            self.initial_battery += increase  # Upgrade permanent battery\n",
        "            self.battery_life = self.initial_battery  # Restore full battery for new search\n",
        "            print(f\"  Battery upgraded! New battery life: {self.battery_life}\")\n",
        "        except ValueError:\n",
        "            print(\"  Invalid input. Battery upgrade failed.\")\n",
        "\n",
        "    def upgrade_depth_limit(self):\n",
        "        \"\"\"Allows user to choose depth limit increase and applies it.\"\"\"\n",
        "        try:\n",
        "            increase = int(input(\"  Enter the amount to increase depth limit by: \"))\n",
        "            self.depth_limit += increase\n",
        "            print(f\"  Depth limit upgraded! New depth limit: {self.depth_limit}\")\n",
        "        except ValueError:\n",
        "            print(\"  Invalid input. Depth upgrade failed.\")\n",
        "\n",
        "    def reset_search(self):\n",
        "        \"\"\"Resets the visited set and restores battery before restarting the search.\"\"\"\n",
        "        self.visited.clear()\n",
        "        self.battery_life = self.initial_battery  # Restore battery for new search\n",
        "\n",
        "\n",
        "# Predefined pipeline with different depths\n",
        "pipeline_map = {\n",
        "    'A': ['B', 'C'],\n",
        "    'B': ['D', 'E'],\n",
        "    'C': ['F'],\n",
        "    'D': [],\n",
        "    'E': ['G'],\n",
        "    'F': [],\n",
        "    'G': []\n",
        "}\n",
        "\n",
        "# User input\n",
        "print(\"\\n  Pipeline Inspection System  \\n\")\n",
        "start_section = input(\"Enter the starting section: \").strip()\n",
        "clog_location = input(\"Enter the section where the clog is located: \").strip()\n",
        "depth_limit = int(input(\"Enter the depth limit: \"))\n",
        "battery_life = int(input(\"Enter initial battery life (steps): \"))\n",
        "\n",
        "# User-defined obstructions\n",
        "obstructions_input = input(\"Enter the sections with obstructions (comma-separated, e.g., B,C,E): \").strip()\n",
        "obstructions = set(obstructions_input.split(',')) if obstructions_input else set()\n",
        "\n",
        "# Create the inspector\n",
        "robot = PipelineInspector(pipeline_map, depth_limit, battery_life, obstructions)\n",
        "\n",
        "# Start search\n",
        "print(\"\\n  Starting depth-limited search...\\n\")\n",
        "result = robot.depth_limited_search(start_section, clog_location, 0)\n",
        "\n",
        "if result:\n",
        "    print(f\"\\n  SUCCESS: Clog found at section {result}!\")\n",
        "else:\n",
        "    print(\"\\n  No clog found within the depth or battery limit. Consider upgrading the system.\")\n",
        "\n",
        "# Upgrade options\n",
        "while True:\n",
        "    upgrade_choice = input(\"\\nDo you want to upgrade the system? (battery/depth/no): \").strip().lower()\n",
        "\n",
        "    if upgrade_choice == \"battery\":\n",
        "        robot.upgrade_battery()\n",
        "    elif upgrade_choice == \"depth\":\n",
        "        robot.upgrade_depth_limit()\n",
        "    elif upgrade_choice == \"no\":\n",
        "        break\n",
        "    else:\n",
        "        print(\"  Invalid choice. Please type 'battery', 'depth', or 'no'.\")\n",
        "        continue\n",
        "\n",
        "    robot.reset_search()  # Reset visited nodes and restore battery\n",
        "    print(\"\\n  Restarting search with upgraded capabilities...\\n\")\n",
        "    result = robot.depth_limited_search(start_section, clog_location, 0)\n",
        "    if result:\n",
        "        print(f\"\\n  SUCCESS: Clog found at section {result} after upgrade!\")\n",
        "        break\n",
        "    else:\n",
        "        print(\"\\n Still no clog found. Try another upgrade or stop.\")"
      ],
      "metadata": {
        "id": "WRQBgbRO8yA8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class AgriculturalKnowledgeBase:\n",
        "    def __init__(self):\n",
        "        self.crops = {}  # Stores crop requirements\n",
        "        self.pest_control = {}  # Stores pest control solutions\n",
        "\n",
        "    def add_crop(self, crop, soil, temperature):\n",
        "        \"\"\"Adds a new crop and its requirements to the knowledge base.\"\"\"\n",
        "        self.crops[crop] = {\"soil\": soil, \"temperature\": temperature}\n",
        "        print(f\"  Added crop: {crop} (Soil: {soil}, Temperature: {temperature}°C)\")\n",
        "\n",
        "    def add_pest_control(self, pest, solution):\n",
        "        \"\"\"Adds pest control information to the knowledge base.\"\"\"\n",
        "        self.pest_control[pest] = solution\n",
        "        print(f\"  Added pest control: {pest} → {solution}\")\n",
        "\n",
        "    def query_crop(self, crop):\n",
        "        \"\"\"Returns the soil and temperature requirements for a crop.\"\"\"\n",
        "        return self.crops.get(crop, \"  Crop not found!\")\n",
        "\n",
        "    def query_pest_control(self, pest):\n",
        "        \"\"\"Returns the solution for a specific pest.\"\"\"\n",
        "        return self.pest_control.get(pest, \"   No pest control information found!\")\n",
        "\n",
        "    def check_conditions(self, crop, soil, temperature):\n",
        "        \"\"\"Checks if given conditions match a crop's requirements.\"\"\"\n",
        "        if crop in self.crops:\n",
        "            expected_soil = self.crops[crop][\"soil\"]\n",
        "            expected_temp = self.crops[crop][\"temperature\"]\n",
        "            if soil == expected_soil and temperature == expected_temp:\n",
        "                return f\"  {crop} can be grown in {soil} soil at {temperature}°C.\"\n",
        "            else:\n",
        "                return f\"️  {crop} may not thrive in {soil} soil at {temperature}°C.\"\n",
        "        return \"   Crop not found!\"\n",
        "\n",
        "    def update_crop(self, crop, soil, temperature):\n",
        "        \"\"\"Updates crop requirements dynamically.\"\"\"\n",
        "        if crop in self.crops:\n",
        "            self.crops[crop] = {\"soil\": soil, \"temperature\": temperature}\n",
        "            print(f\"  Updated {crop}'s requirements: Soil: {soil}, Temperature: {temperature}°C\")\n",
        "        else:\n",
        "            print(f\"   Cannot update. {crop} is not in the knowledge base!\")\n",
        "\n",
        "# Initialize the knowledge base\n",
        "kb = AgriculturalKnowledgeBase()\n",
        "\n",
        "# Get user inputs to add crops and pest control solutions\n",
        "num_crops = int(input(\"Enter the number of crops you want to add: \"))\n",
        "for _ in range(num_crops):\n",
        "    crop = input(\"\\nEnter crop name: \")\n",
        "    soil = input(f\"Enter soil type for {crop}: \")\n",
        "    temp = int(input(f\"Enter ideal temperature (°C) for {crop}: \"))\n",
        "    kb.add_crop(crop, soil, temp)\n",
        "\n",
        "num_pests = int(input(\"\\nEnter the number of pest control rules to add: \"))\n",
        "for _ in range(num_pests):\n",
        "    pest = input(\"\\nEnter pest name: \")\n",
        "    solution = input(f\"Enter pest control method for {pest}: \")\n",
        "    kb.add_pest_control(pest, solution)\n",
        "\n",
        "# Querying crop information\n",
        "crop_query = input(\"\\n  Enter the crop to check requirements: \")\n",
        "print(\"  Crop Requirements:\", kb.query_crop(crop_query))\n",
        "\n",
        "# Querying pest control solutions\n",
        "pest_query = input(\"\\n  Enter the pest to check control methods: \")\n",
        "print(\"🛡 Pest Control Solution:\", kb.query_pest_control(pest_query))\n",
        "\n",
        "# Checking if given conditions are suitable for a crop\n",
        "crop_check = input(\"\\n  Enter the crop to check if conditions are suitable: \")\n",
        "soil_check = input(f\"Enter soil type for {crop_check}: \")\n",
        "temp_check = int(input(f\"Enter temperature (°C) for {crop_check}: \"))\n",
        "print(kb.check_conditions(crop_check, soil_check, temp_check))\n",
        "\n",
        "# Updating a crop's requirements\n",
        "update_choice = input(\"\\n  Do you want to update crop requirements? (yes/no): \").strip().lower()\n",
        "if update_choice == \"yes\":\n",
        "    update_crop = input(\"\\nEnter crop to update: \")\n",
        "    new_soil = input(f\"Enter new soil type for {update_crop}: \")\n",
        "    new_temp = int(input(f\"Enter new temperature (°C) for {update_crop}: \"))\n",
        "    kb.update_crop(update_crop, new_soil, new_temp)\n",
        "\n",
        "# Rechecking crop conditions after update\n",
        "recheck_choice = input(\"\\n  Do you want to recheck conditions for a crop? (yes/no): \").strip().lower()\n",
        "if recheck_choice == \"yes\":\n",
        "    crop_recheck = input(\"\\nEnter crop to recheck: \")\n",
        "    soil_recheck = input(f\"Enter soil type for {crop_recheck}: \")\n",
        "    temp_recheck = int(input(f\"Enter temperature (°C) for {crop_recheck}: \"))\n",
        "    print(kb.check_conditions(crop_recheck, soil_recheck, temp_recheck))"
      ],
      "metadata": {
        "id": "HO_g6Qq6I_5D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "fZKOGU_iJcxy"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}